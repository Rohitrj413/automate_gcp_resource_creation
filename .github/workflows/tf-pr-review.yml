name: "Terraform PR Review with Vertex AI Gemini"

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.tf'

jobs:
  tf-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' 

      - name: Install dependencies
        run: |
          # Install the Vertex AI SDK and Flask (Flask is needed by the script itself)
          pip3 install --upgrade --user "google-cloud-aiplatform>=1.60.0" flask google-auth

      - name: Authenticate with Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # Use your GCP Service Account secret for secure authentication
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Generate Summary and Capture Output
        id: generate
        run: |
          # 1. Execute the Python script. The script's final print() is the output.
          SUMMARY_OUTPUT=$(python ./scripts/main.py)
          
          # Set the summary as a multi-line output variable
          echo "SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          # Pass the project ID as an environment variable for the Python script to use
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}

      - name: Post comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            // Access the output variable set in the previous 'generate' step
            const summary = context.steps.generate.outputs.SUMMARY;
            
            const fullComment = `
            ### Terraform PR Review (Powered by Gemini)
            
            **Summary of Infrastructure Changes:**
            
            ${summary}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fullComment
            })
